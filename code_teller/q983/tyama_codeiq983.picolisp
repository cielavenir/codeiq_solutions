(de calc2 (d num bse)
	(if (= 0 d)
		(% num bse)
		(calc2 (- d 1) (/ num bse) bse)
	)
)
(de calc (digits expbase bse x n)
	(if (> x n)
		(calc2 (- (- digits 1) (% n digits)) (+ expbase (/ n digits)) bse)
		(calc (+ digits 1) (* expbase bse) bse (* (* (+ digits 1) (* expbase bse)) (- bse 1)) (- n x))
	)
)

(de ma ()
	(let (n (read))
		(if (and (not (= n NIL)) (not (= n 0))) (prog
			(prinl (calc 1 1 10 9 (+ n 3)))
			(ma)
		))
	)
)
(in NIL
	(ma)
)