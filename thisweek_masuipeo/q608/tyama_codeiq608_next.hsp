#module
#deffunc reverse array a_,int start_,int size_
	end_=start_+size_-1
	i_=0
	repeat
		if i_>size_/2-1: break
		z_=a_(start_+i_)
		a_(start_+i_)=a_(end_-i_)
		a_(end_-i_)=z_
		i_++
	loop
	return

#defcfunc next_permutation array a_,int n_
	if n_<0||length(a_)<n_ : return 0
	i_=0
	reverse a_,n_,length(a_)-n_
	i_=length(a_)-2
	repeat
		if i_<0: break
		if a_(i_)<a_(i_+1): break
		i_--
	loop
	if i_<0{
		reverse a_,0,length(a_)
		return 0
	}
	k_=i_
	i_=length(a_)-1
	repeat
		if i_<k_+1: break
		if a_(k_)<a_(i_): break
		i_--
	loop
	l_=i_
	z_=a_(k_):a_(k_)=a_(l_):a_(l_)=z_
	reverse a_,k_+1,length(a_)-(k_+1)
	return 1

#global
N=6
dim e0,N*2
dim f0,N*2
i=0
repeat
	if i==N: break
	e0(N+i)=1
	f0(N+i)=1
	i++
loop
;sort e0,f0 ;not required, since we have already sorted form
r=0
dim e,N*2+1
dim f,N*2+1
repeat
	i=0
	repeat
		if i==N*2: break
		e(i+1)=e(i)+e0(i)
		i++
	loop
	repeat
		i=0
		repeat
			if i==N*2: break
			f(i+1)=f(i)+f0(i)
			if e(i)==f(i)&e(i+1)==f(i+1): break
			i++
		loop
		if i==N*2: r++
		z=next_permutation(f0,length(f0))
		if z=0: break
	loop
	z=next_permutation(e0,length(e0))
	if z=0: break
loop
mes r
end