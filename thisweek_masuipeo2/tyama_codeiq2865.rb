#!/usr/bin/ruby
#coding:utf-8

=begin
今回の問題は、グリッドが数列の要素の和であることから、次のように置き換えることができる。

数列が2個与えられる。最初はカーソルが一番左にあるとする。
[3],5,0,8,1,4,2,6,7,9
[4],8,1,7,0,6,9,2,5,3
このカーソルをどちらも一番右に動かしたい。
3,5,0,8,1,4,2,6,7,[9]
4,8,1,7,0,6,9,2,5,[3]
ただし、カーソルを一回動かすたびに、2つのカーソルが指し示す数値の和がコストとしてかかる。
このときコストの和を最小化し、そのコストの和を出力せよ(ただし初期状態もコストに含む)。

数列1のカーソルを右に動かすことが、元の問題での右への移動。
数列1のカーソルを左に動かすことが、元の問題での左への移動。
数列2のカーソルを右に動かすことが、元の問題での下への移動。
数列2のカーソルを左に動かすことが、元の問題での上への移動。
いずれかのカーソルを右に動かし続けるのが最短となることは容易に考察できる。
つまり、左・上に戻る経路は右・下のみに進む経路に書き換えたほうがコストが小さくて済むということである。

以上より、単純なO(n^2)の動的計画法で十分である。
=end

#入力
A,B=2.times.map{gets.split(',').map(&:to_i)}
#テーブル初期化
T=A.map{|a|B.map{|b|a+b}}
(1...A.size).each{|a|T[a][0]+=T[a-1][0]}
(1...B.size).each{|b|T[0][b]+=T[0][b-1]}
#動的計画法
(1...A.size).each{|a|
	(1...B.size).each{|b|
		T[a][b]+=[T[a][b-1],T[a-1][b]].min
	}
}
#出力
p T[A.size-1][B.size-1]

# ・シゴトに役立つデータ分析・統計のトリセツ